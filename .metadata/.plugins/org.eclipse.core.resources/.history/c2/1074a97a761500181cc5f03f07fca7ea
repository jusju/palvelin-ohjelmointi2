package com.gallery.gallery.web;

import java.io.IOException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.gallery.gallery.domain.Picture;
import com.gallery.gallery.domain.PictureService;

@Controller
public class ImageController {
	
	private static final String BASE_PATH = "/images";
	
	//filename .+ ottaa tiedoston päätteen mukaan nimeen!
	private static final String FILENAME = "{filename:.+";
	
	private final PictureService pictureservice;
	
	@Autowired
	public ImageController(PictureService pictureservice) {
		this.pictureservice = pictureservice;
	}
	
	@RequestMapping(value="/")
	public String index(Model model, Pageable pageable) throws IOException {
		final Page<Picture> page = pictureservice.findPage(pageable);
		model.addAttribute("page", page);
		return "pictureindex";
	}

@RequestMapping(method = RequestMethod.GET, value  = BASE_PATH + "/" + FILENAME + "/raw") //method = RequestMethod.GET, value = BASE_PATH + "/" + FILENAME + "/raw"
public ResponseEntity<?> oneRawImage(@PathVariable String filename){
	
	try{
	Resource file = pictureservice.findOnePicture(filename);
	return ResponseEntity.ok()
				.contentLength(file.contentLength())
				.contentType(MediaType.IMAGE_JPEG)
				.body(new InputStreamResource(file.getInputStream()));
	} catch (IOException e) {
		return ResponseEntity.badRequest()
				.body("Couldn't find " + filename + " => " + e.getMessage());
	}
}

@RequestMapping(method = RequestMethod.POST, value= BASE_PATH)
@ResponseBody
public String createFile(@RequestParam("file") MultipartFile file, RedirectAttributes redirectAttributes) {
	
	try {
	pictureservice.createImage(file);
	redirectAttributes.addFlashAttribute("flash.message", "Succesfully iploaded " + file.getName());
	} catch (IOException e) {
		redirectAttributes.addFlashAttribute("flash.message", "Failed to upload " + file.getName() + " => " + e.getMessage());
	}
	return "/";
}

@RequestMapping(method = RequestMethod.DELETE, value = BASE_PATH + "/" + FILENAME)
@ResponseBody
public ResponseEntity<?> deleteFile(@PathVariable String filename){
	
	try {
	pictureservice.deleteImage(filename);
	return ResponseEntity.status(HttpStatus.NO_CONTENT)
			.body("Succesfully deleted" + filename);
	} catch (IOException e) {
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
				.body("Failed");
	}
}
}